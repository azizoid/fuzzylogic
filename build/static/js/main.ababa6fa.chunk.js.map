{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","row1","row2","row3","color","loading","setLoading","blue","red","green","choise","setChoise","final","setFinal","lastChoise","e","className","map","i","onClick","blueColor","style","backgroundColor","key","redColor","greenColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAkHeA,G,YA7GH,WAAO,IAAD,EACUC,mBAAS,CACjCC,KAAM,CAAC,SAAU,SAAU,UAC3BC,KAAM,CAAC,SAAU,SAAU,UAC3BC,KAAM,CAAC,SAAU,SAAU,YAJb,mBACTC,EADS,aAOcJ,mBAAS,IAPvB,mBAOTK,EAPS,KAOAC,EAPA,OASYN,mBAAS,CAAEO,KAAM,EAAGC,IAAK,EAAGC,MAAO,IAT/C,mBASTC,EATS,KASDC,EATC,OAUUX,qBAVV,mBAUTY,EAVS,KAUFC,EAVE,KAwBVC,EAAa,SAACC,GAClBF,EAASE,GACTT,EAAW,IAGb,OACE,yBAAKU,UAAU,wBACb,0CACY,GAAXX,GACC,yBAAKW,UAAU,OACZZ,EAAMH,KAAKgB,KAAI,SAACb,EAAOc,GACtB,OACE,yBACEF,UAAU,WACVG,QAAS,SAACJ,GAAD,OA1BL,SAACA,GACjBJ,EAAU,eAAKD,EAAN,CAAcH,KAAMQ,KAC7BT,EAAW,GAwBiBc,CAAUhB,IAC1BiB,MAAO,CAAEC,gBAAiB,IAAMlB,GAChCmB,IAAKL,QAOH,GAAXb,GACC,yBAAKW,UAAU,OACZZ,EAAMF,KAAKe,KAAI,SAACb,EAAOc,GACtB,OACE,yBACEF,UAAU,WACVG,QAAS,SAACJ,GAAD,OArCN,SAACA,GAChBJ,EAAU,eAAKD,EAAN,CAAcF,IAAKO,KAC5BT,EAAW,GAmCiBkB,CAASpB,IACzBiB,MAAO,CAAEC,gBAAiB,IAAMlB,GAChCmB,IAAKL,QAOH,GAAXb,GACC,yBAAKW,UAAU,OACZZ,EAAMD,KAAKc,KAAI,SAACb,EAAOc,GACtB,OACE,yBACEF,UAAU,WACVG,QAAS,SAACJ,GAAD,OAhDJ,SAACA,GAClBJ,EAAU,eAAKD,EAAN,CAAcD,MAAOM,KAC9BT,EAAW,GA8CiBmB,CAAWrB,IAC3BiB,MAAO,CAAEC,gBAAiB,IAAMlB,GAChCmB,IAAKL,QAOH,GAAXb,GACC,yBAAKW,UAAU,OACb,yBACEA,UAAU,WACVG,QAAS,SAACJ,GAAD,OAAOD,EAAWJ,EAAOH,OAClCc,MAAO,CAAEC,gBAAiB,IAAMZ,EAAOH,QAEzC,yBACES,UAAU,WACVG,QAAS,SAACJ,GAAD,OAAOD,EAAWJ,EAAOF,MAClCa,MAAO,CAAEC,gBAAiB,IAAMZ,EAAOF,OAEzC,yBACEQ,UAAU,WACVG,QAAS,SAACJ,GAAD,OAAOD,EAAWJ,EAAOD,QAClCY,MAAO,CAAEC,gBAAiB,IAAMZ,EAAOD,UAKjC,GAAXJ,GACC,yBAAKW,UAAU,OACb,yBACEA,UAAU,YACVK,MAAO,CAAEC,gBAAiB,IAAMV,SC9FxBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ababa6fa.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [color, setColor] = useState({\n    row1: [\"0000A0\", \"B22222\", \"006400\"],\n    row2: [\"DC143C\", \"0000FF\", \"008000\"],\n    row3: [\"FF0000\", \"00FF00\", \"ADD8E6\"],\n  });\n\n  const [loading, setLoading] = useState(0);\n\n  const [choise, setChoise] = useState({ blue: 0, red: 0, green: 0 });\n  const [final, setFinal] = useState();\n\n  const blueColor = (e) => {\n    setChoise({ ...choise, blue: e });\n    setLoading(1);\n  };\n  const redColor = (e) => {\n    setChoise({ ...choise, red: e });\n    setLoading(2);\n  };\n  const greenColor = (e) => {\n    setChoise({ ...choise, green: e });\n    setLoading(3);\n  };\n  const lastChoise = (e) => {\n    setFinal(e);\n    setLoading(4);\n  };\n\n  return (\n    <div className=\"container App colors\">\n      <h1>Yesili sec</h1>\n      {loading == 0 && (\n        <div className=\"row\">\n          {color.row1.map((color, i) => {\n            return (\n              <div\n                className=\"col-sm-4\"\n                onClick={(e) => blueColor(color)}\n                style={{ backgroundColor: \"#\" + color }}\n                key={i}\n              ></div>\n            );\n          })}\n        </div>\n      )}\n\n      {loading == 1 && (\n        <div className=\"row\">\n          {color.row2.map((color, i) => {\n            return (\n              <div\n                className=\"col-sm-4\"\n                onClick={(e) => redColor(color)}\n                style={{ backgroundColor: \"#\" + color }}\n                key={i}\n              ></div>\n            );\n          })}\n        </div>\n      )}\n\n      {loading == 2 && (\n        <div className=\"row\">\n          {color.row3.map((color, i) => {\n            return (\n              <div\n                className=\"col-sm-4\"\n                onClick={(e) => greenColor(color)}\n                style={{ backgroundColor: \"#\" + color }}\n                key={i}\n              ></div>\n            );\n          })}\n        </div>\n      )}\n\n      {loading == 3 && (\n        <div className=\"row\">\n          <div\n            className=\"col-sm-4\"\n            onClick={(e) => lastChoise(choise.blue)}\n            style={{ backgroundColor: \"#\" + choise.blue }}\n          ></div>\n          <div\n            className=\"col-sm-4\"\n            onClick={(e) => lastChoise(choise.red)}\n            style={{ backgroundColor: \"#\" + choise.red }}\n          ></div>\n          <div\n            className=\"col-sm-4\"\n            onClick={(e) => lastChoise(choise.green)}\n            style={{ backgroundColor: \"#\" + choise.green }}\n          ></div>\n        </div>\n      )}\n\n      {loading == 4 && (\n        <div className=\"row\">\n          <div\n            className=\"col-sm-12\"\n            style={{ backgroundColor: \"#\" + final }}\n          ></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}